using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToDoListWebAppHelpers
{
    public class FrameworkUtility
    {
        /// <summary>
        /// Creates zip file of the logs generated by Extent reports
        /// </summary>
        /// <param name="pathToZip">Path to zip file</param>
        /// <param name="zipFileDestPath">Destination path of zip file</param>
        public static void ZipFolderLocation(string pathToZip, string zipFileDestPath)
        {
            try
            {
                ZipFile.CreateFromDirectory(pathToZip, zipFileDestPath);
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// Checks if folder contains files
        /// </summary>
        /// <param name="pathToFolder">path to the folder</param>
        /// <param name="format">format of the files to be checked</param>
        /// <returns></returns>
        public static bool CheckIfFolderContainsFiles(string pathToFolder, string format)
        {
            try
            {
                DirectoryInfo di = new DirectoryInfo(pathToFolder);
                return di.GetFiles("*." + format).Any();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// Deletes all files in the specified folder
        /// </summary>
        /// <param name="pathToFolder">path to folder</param>
        public static void DeleteAllFilesInFolder(string pathToFolder)
        {
            try
            {
                System.IO.DirectoryInfo di = new DirectoryInfo(pathToFolder);

                foreach (FileInfo file in di.GetFiles())
                {
                    file.Delete();
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// gets project directory
        /// </summary>
        /// <returns>report path</returns>
        public static String GetProjectBaseDirectory()
        {
            String basePath = AppDomain.CurrentDomain.BaseDirectory;
            String reportPath = basePath.Substring(0, basePath.LastIndexOf('k') + 1);
            return reportPath;
        }

        /// <summary>
        /// Gets test report directory
        /// </summary>
        /// <returns>report path</returns>
        public static String GetTestReportDirectory()
        {
            String basePath = AppDomain.CurrentDomain.BaseDirectory;
            String reportPath = basePath.Substring(0, basePath.LastIndexOf('k') + 1);
            return reportPath + @"\TestReport\";
        }

        /// <summary>
        /// get test report back up directory
        /// </summary>
        /// <returns>report path for backup</returns>
        public static String GetTestReportBackUpDirectory()
        {
            String basePath = AppDomain.CurrentDomain.BaseDirectory;
            String reportPath = basePath.Substring(0, basePath.LastIndexOf('k') + 1);
            return reportPath + @"\TestReport_Backup\";
        }

        /// <summary>
        /// Gets current date
        /// </summary>
        /// <returns>returns current day</returns>
        public static string GetCurrentDate()
        {
            try
            {
                return DateTime.Today.Day.ToString();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// Gets day from date
        /// </summary>
        /// <param name="date">date in string format</param>
        /// <returns>day from date</returns>
        public static string GetDayFromDate(string date)
        {
            try
            {
                DateTime datetime = Convert.ToDateTime(date);
                return datetime.Day.ToString();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// Gets month from date
        /// </summary>
        /// <param name="date">date in string format</param>
        /// <returns>month from date</returns>
        public static string GetMonthFromDate(string date)
        {
            try
            {
                DateTime datetime = Convert.ToDateTime(date);
                return datetime.Month.ToString("MMMM");
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// parses the date
        /// </summary>
        /// <param name="date">date in string format</param>
        /// <returns>true if successful else returns false</returns>
        public static bool DateTimeParser(string date)
        {
            try
            {
                DateTime result;
                if (DateTime.TryParseExact(date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal, out result))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        /// <summary>
        /// Splits the date into year, month and day
        /// </summary>
        /// <param name="date">date in string format</param>
        /// <returns>date in key value pair splitted into day, month and year</returns>
        public static Dictionary<string, string> GetSplitDate(string date)
        {
            try
            {
                DateTime dateToBeChecked = Convert.ToDateTime(date);
                Dictionary<string, string> splitDate = new Dictionary<string, string>();
                splitDate.Add("year", dateToBeChecked.Year.ToString());
                splitDate.Add("month", dateToBeChecked.ToString("MMMM"));
                splitDate.Add("day", dateToBeChecked.Day.ToString());

                return splitDate;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
    }
}
